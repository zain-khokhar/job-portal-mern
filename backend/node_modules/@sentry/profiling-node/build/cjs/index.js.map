{"version":3,"file":"index.js","sources":["../../src/debug-build.ts","../../src/nodeVersion.ts","../../src/utils.ts","../../src/spanProfileUtils.ts","../../src/integration.ts"],"sourcesContent":["declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","import { parseSemver } from '@sentry/core';\n\nexport const NODE_VERSION = parseSemver(process.versions.node) as { major: number; minor: number; patch: number };\nexport const NODE_MAJOR = NODE_VERSION.major;\n","import type {\n  Client,\n  ContinuousThreadCpuProfile,\n  DebugImage,\n  DsnComponents,\n  Envelope,\n  Event,\n  EventEnvelopeHeaders,\n  Profile,\n  ProfileChunk,\n  ProfileChunkEnvelope,\n  ProfileChunkItem,\n  SdkInfo,\n  ThreadCpuProfile,\n  TransactionEvent,\n} from '@sentry/core';\nimport {\n  createEnvelope,\n  debug,\n  dsnToString,\n  forEachEnvelopeItem,\n  getDebugImagesForResources,\n  uuid4,\n} from '@sentry/core';\nimport type { RawChunkCpuProfile, RawThreadCpuProfile } from '@sentry-internal/node-cpu-profiler';\nimport * as os from 'os';\nimport { env, versions } from 'process';\nimport { isMainThread, threadId } from 'worker_threads';\nimport { DEBUG_BUILD } from './debug-build';\n\n// We require the file because if we import it, it will be included in the bundle.\n// I guess tsc does not check file contents when it's imported.\nexport const PROFILER_THREAD_ID_STRING = String(threadId);\nexport const PROFILER_THREAD_NAME = isMainThread ? 'main' : 'worker';\nconst FORMAT_VERSION = '1';\nconst CONTINUOUS_FORMAT_VERSION = '2';\n\n// Machine properties (eval only once)\nconst PLATFORM = os.platform();\nconst RELEASE = os.release();\nconst VERSION = os.version();\nconst TYPE = os.type();\nconst MODEL = os.machine();\nconst ARCH = os.arch();\n\n/**\n * Checks if the profile is a raw profile or a profile enriched with thread information.\n * @param {ThreadCpuProfile | RawThreadCpuProfile} profile\n * @returns {boolean}\n */\nfunction isRawThreadCpuProfile(\n  profile: ThreadCpuProfile | RawThreadCpuProfile | ContinuousThreadCpuProfile | RawChunkCpuProfile,\n): profile is RawThreadCpuProfile | RawChunkCpuProfile {\n  return !('thread_metadata' in profile);\n}\n\n/**\n * Enriches the profile with threadId of the current thread.\n * This is done in node as we seem to not be able to get the info from C native code.\n *\n * @param {ThreadCpuProfile | RawThreadCpuProfile} profile\n * @returns {ThreadCpuProfile}\n */\nexport function enrichWithThreadInformation(\n  profile: ThreadCpuProfile | RawThreadCpuProfile | ContinuousThreadCpuProfile | RawChunkCpuProfile,\n): ThreadCpuProfile | ContinuousThreadCpuProfile {\n  if (!isRawThreadCpuProfile(profile)) {\n    return profile;\n  }\n\n  return {\n    samples: profile.samples,\n    frames: profile.frames,\n    stacks: profile.stacks,\n    thread_metadata: {\n      [PROFILER_THREAD_ID_STRING]: {\n        name: PROFILER_THREAD_NAME,\n      },\n    },\n  } as ThreadCpuProfile | ContinuousThreadCpuProfile;\n}\n\n/**\n * Creates a profiling envelope item, if the profile does not pass validation, returns null.\n * @param {RawThreadCpuProfile}\n * @param {Event}\n * @returns {Profile | null}\n */\nexport function createProfilingEvent(client: Client, profile: RawThreadCpuProfile, event: Event): Profile | null {\n  if (!isValidProfile(profile)) {\n    return null;\n  }\n\n  return createProfilePayload(client, profile, {\n    release: event.release ?? '',\n    environment: event.environment ?? '',\n    event_id: event.event_id ?? '',\n    transaction: event.transaction ?? '',\n    start_timestamp: event.start_timestamp ? event.start_timestamp * 1000 : Date.now(),\n    trace_id: event.contexts?.trace?.trace_id ?? '',\n    profile_id: profile.profile_id,\n  });\n}\n\n/**\n * Create a profile\n * @param {RawThreadCpuProfile} cpuProfile\n * @param {options}\n * @returns {Profile}\n */\nfunction createProfilePayload(\n  client: Client,\n  cpuProfile: RawThreadCpuProfile,\n  {\n    release,\n    environment,\n    event_id,\n    transaction,\n    start_timestamp,\n    trace_id,\n    profile_id,\n  }: {\n    release: string;\n    environment: string;\n    event_id: string;\n    transaction: string;\n    start_timestamp: number;\n    trace_id: string | undefined;\n    profile_id: string;\n  },\n): Profile {\n  // Log a warning if the profile has an invalid traceId (should be uuidv4).\n  // All profiles and transactions are rejected if this is the case and we want to\n  // warn users that this is happening if they enable debug flag\n  if (trace_id?.length !== 32) {\n    DEBUG_BUILD && debug.log(`[Profiling] Invalid traceId: ${trace_id} on profiled event`);\n  }\n\n  const enrichedThreadProfile = enrichWithThreadInformation(cpuProfile);\n\n  const profile: Profile = {\n    event_id: profile_id,\n    timestamp: new Date(start_timestamp).toISOString(),\n    platform: 'node',\n    version: FORMAT_VERSION,\n    release: release,\n    environment: environment,\n    measurements: cpuProfile.measurements,\n    runtime: {\n      name: 'node',\n      version: versions.node || '',\n    },\n    os: {\n      name: PLATFORM,\n      version: RELEASE,\n      build_number: VERSION,\n    },\n    device: {\n      locale: env['LC_ALL'] || env['LC_MESSAGES'] || env['LANG'] || env['LANGUAGE'] || '',\n      model: MODEL,\n      manufacturer: TYPE,\n      architecture: ARCH,\n      is_emulator: false,\n    },\n    debug_meta: {\n      images: applyDebugMetadata(client, cpuProfile.resources),\n    },\n    profile: enrichedThreadProfile as ThreadCpuProfile,\n    transaction: {\n      name: transaction,\n      id: event_id,\n      trace_id: trace_id || '',\n      active_thread_id: PROFILER_THREAD_ID_STRING,\n    },\n  };\n\n  return profile;\n}\n\n/**\n * Create a profile chunk from raw thread profile\n * @param {RawThreadCpuProfile} cpuProfile\n * @param {options}\n * @returns {Profile}\n */\nfunction createProfileChunkPayload(\n  client: Client,\n  cpuProfile: RawChunkCpuProfile,\n  {\n    release,\n    environment,\n    trace_id,\n    profiler_id,\n    chunk_id,\n    sdk,\n  }: {\n    release: string;\n    environment: string;\n    trace_id: string | undefined;\n    chunk_id: string;\n    profiler_id: string;\n    sdk: SdkInfo | undefined;\n  },\n): ProfileChunk {\n  // Log a warning if the profile has an invalid traceId (should be uuidv4).\n  // All profiles and transactions are rejected if this is the case and we want to\n  // warn users that this is happening if they enable debug flag\n  if (trace_id?.length !== 32) {\n    DEBUG_BUILD && debug.log(`[Profiling] Invalid traceId: ${trace_id} on profiled event`);\n  }\n\n  const enrichedThreadProfile = enrichWithThreadInformation(cpuProfile);\n\n  const profile: ProfileChunk = {\n    chunk_id: chunk_id,\n    client_sdk: {\n      name: sdk?.name ?? 'sentry.javascript.node',\n      version: sdk?.version ?? '0.0.0',\n    },\n    profiler_id: profiler_id,\n    platform: 'node',\n    version: CONTINUOUS_FORMAT_VERSION,\n    release: release,\n    environment: environment,\n    measurements: cpuProfile.measurements,\n    debug_meta: {\n      images: applyDebugMetadata(client, cpuProfile.resources),\n    },\n    profile: enrichedThreadProfile as ContinuousThreadCpuProfile,\n  };\n\n  return profile;\n}\n\n/**\n * Creates a profiling chunk envelope item, if the profile does not pass validation, returns null.\n */\nexport function createProfilingChunkEvent(\n  client: Client,\n  options: { release?: string; environment?: string },\n  profile: RawChunkCpuProfile,\n  sdk: SdkInfo | undefined,\n  identifiers: { trace_id: string | undefined; chunk_id: string; profiler_id: string },\n): ProfileChunk | null {\n  if (!isValidProfileChunk(profile)) {\n    return null;\n  }\n\n  return createProfileChunkPayload(client, profile, {\n    release: options.release ?? '',\n    environment: options.environment ?? '',\n    trace_id: identifiers.trace_id ?? '',\n    chunk_id: identifiers.chunk_id,\n    profiler_id: identifiers.profiler_id,\n    sdk,\n  });\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n * @param {unknown} rate\n * @returns {boolean}\n */\nexport function isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  if ((typeof rate !== 'number' && typeof rate !== 'boolean') || (typeof rate === 'number' && isNaN(rate))) {\n    DEBUG_BUILD &&\n      debug.warn(\n        `[Profiling] Invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // Boolean sample rates are always valid\n  if (rate === true || rate === false) {\n    return true;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    DEBUG_BUILD && debug.warn(`[Profiling] Invalid sample rate. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Checks if the profile is valid and can be sent to Sentry.\n * @param {RawThreadCpuProfile} profile\n * @returns {boolean}\n */\nexport function isValidProfile(profile: RawThreadCpuProfile): profile is RawThreadCpuProfile & { profile_id: string } {\n  if (profile.samples.length <= 1) {\n    DEBUG_BUILD &&\n      // Log a warning if the profile has less than 2 samples so users can know why\n      // they are not seeing any profiling data and we cant avoid the back and forth\n      // of asking them to provide us with a dump of the profile data.\n      debug.log('[Profiling] Discarding profile because it contains less than 2 samples');\n    return false;\n  }\n\n  if (!profile.profile_id) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Checks if the profile chunk is valid and can be sent to Sentry.\n * @param profile\n * @returns\n */\nexport function isValidProfileChunk(profile: RawChunkCpuProfile): profile is RawChunkCpuProfile {\n  if (profile.samples.length <= 1) {\n    DEBUG_BUILD &&\n      // Log a warning if the profile has less than 2 samples so users can know why\n      // they are not seeing any profiling data and we cant avoid the back and forth\n      // of asking them to provide us with a dump of the profile data.\n      debug.log('[Profiling] Discarding profile chunk because it contains less than 2 samples');\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Adds items to envelope if they are not already present - mutates the envelope.\n * @param {Envelope} envelope\n * @param {Profile[]} profiles\n * @returns {Envelope}\n */\nexport function addProfilesToEnvelope(envelope: Envelope, profiles: Profile[]): Envelope {\n  if (!profiles.length) {\n    return envelope;\n  }\n\n  for (const profile of profiles) {\n    // @ts-expect-error untyped envelope\n    envelope[1].push([{ type: 'profile' }, profile]);\n  }\n  return envelope;\n}\n\n/**\n * Finds transactions with profile_id context in the envelope\n * @param {Envelope} envelope\n * @returns {Event[]}\n */\nexport function findProfiledTransactionsFromEnvelope(envelope: Envelope): Event[] {\n  const events: TransactionEvent[] = [];\n\n  forEachEnvelopeItem(envelope, (item, type) => {\n    if (type !== 'transaction') {\n      return;\n    }\n\n    // First item is the type, so we can skip it, everything else is an event\n    for (let j = 1; j < item.length; j++) {\n      const event = item[j] as TransactionEvent;\n\n      if (!event) {\n        // Shouldn't happen, but lets be safe\n        continue;\n      }\n\n      const profile_id = event.contexts?.profile?.profile_id;\n\n      if (event && profile_id) {\n        events.push(event);\n      }\n    }\n  });\n\n  return events;\n}\n\n/**\n * Creates event envelope headers for a profile chunk. This is separate from createEventEnvelopeHeaders util\n * as the profile chunk does not conform to the sentry event type\n */\nexport function createEventEnvelopeHeaders(\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  return {\n    event_id: uuid4(),\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n}\n\n/**\n * Creates a standalone profile_chunk envelope.\n */\nexport function makeProfileChunkEnvelope(\n  platform: 'node',\n  chunk: ProfileChunk,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): ProfileChunkEnvelope {\n  const profileChunkHeader: ProfileChunkItem[0] = {\n    type: 'profile_chunk',\n    platform,\n  };\n\n  return createEnvelope<ProfileChunkEnvelope>(createEventEnvelopeHeaders(sdkInfo, tunnel, dsn), [\n    [profileChunkHeader, chunk],\n  ]);\n}\n\n/**\n * Cross reference profile collected resources with debug_ids and return a list of debug images.\n * @param {string[]} resource_paths\n * @returns {DebugImage[]}\n */\nexport function applyDebugMetadata(client: Client, resource_paths: ReadonlyArray<string>): DebugImage[] {\n  const options = client.getOptions();\n\n  if (!options?.stackParser) {\n    return [];\n  }\n\n  return getDebugImagesForResources(options.stackParser, resource_paths);\n}\n","/* eslint-disable deprecation/deprecation */\nimport type { CustomSamplingContext, Span } from '@sentry/core';\nimport { debug, spanIsSampled, spanToJSON, uuid4 } from '@sentry/core';\nimport type { NodeClient } from '@sentry/node';\nimport { type RawThreadCpuProfile, CpuProfilerBindings } from '@sentry-internal/node-cpu-profiler';\nimport { DEBUG_BUILD } from './debug-build';\nimport { isValidSampleRate } from './utils';\n\nexport const MAX_PROFILE_DURATION_MS = 30 * 1000;\n\n/**\n * Takes a transaction and determines if it should be profiled or not. If it should be profiled, it returns the\n * profile_id, otherwise returns undefined. Takes care of setting profile context on transaction as well\n */\nexport function maybeProfileSpan(\n  client: NodeClient | undefined,\n  span: Span,\n  customSamplingContext?: CustomSamplingContext,\n): string | undefined {\n  // profilesSampleRate is multiplied with tracesSampleRate to get the final sampling rate. We dont perform\n  // the actual multiplication to get the final rate, but we discard the profile if the span was sampled,\n  // so anything after this block from here is based on the span sampling.\n  if (!spanIsSampled(span)) {\n    return;\n  }\n\n  // Client and options are required for profiling\n  if (!client) {\n    DEBUG_BUILD && debug.log('[Profiling] Profiling disabled, no client found.');\n    return;\n  }\n\n  const options = client.getOptions();\n  if (!options) {\n    DEBUG_BUILD && debug.log('[Profiling] Profiling disabled, no options found.');\n    return;\n  }\n\n  const profilesSampler = options.profilesSampler;\n  let profilesSampleRate: number | boolean | undefined = options.profilesSampleRate;\n\n  // Prefer sampler to sample rate if both are provided.\n  if (typeof profilesSampler === 'function') {\n    const { description: spanName = '<unknown>', data } = spanToJSON(span);\n    // We bail out early if that is not the case\n    const parentSampled = true;\n\n    profilesSampleRate = profilesSampler({\n      name: spanName,\n      attributes: data,\n      parentSampled,\n      ...customSamplingContext,\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(profilesSampleRate)) {\n    DEBUG_BUILD && debug.warn('[Profiling] Discarding profile because of invalid sample rate.');\n    return;\n  }\n\n  // if the function returned 0 (or false), or if `profileSampleRate` is 0, it's a sign the profile should be dropped\n  if (!profilesSampleRate) {\n    DEBUG_BUILD &&\n      debug.log(\n        `[Profiling] Discarding profile because ${\n          typeof profilesSampler === 'function'\n            ? 'profileSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or profileSampleRate is set to 0'\n        }`,\n      );\n    return;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  const sampled = profilesSampleRate === true ? true : Math.random() < profilesSampleRate;\n  // Check if we should sample this profile\n  if (!sampled) {\n    DEBUG_BUILD &&\n      debug.log(\n        `[Profiling] Discarding profile because it's not included in the random sample (sampling rate = ${Number(\n          profilesSampleRate,\n        )})`,\n      );\n    return;\n  }\n\n  const profile_id = uuid4();\n  CpuProfilerBindings.startProfiling(profile_id);\n  DEBUG_BUILD && debug.log(`[Profiling] started profiling transaction: ${spanToJSON(span).description}`);\n\n  // set transaction context - do this regardless if profiling fails down the line\n  // so that we can still see the profile_id in the transaction context\n  return profile_id;\n}\n\n/**\n * Stops the profiler for profile_id and returns the profile\n * @param transaction\n * @param profile_id\n * @returns\n */\nexport function stopSpanProfile(span: Span, profile_id: string | undefined): RawThreadCpuProfile | null {\n  // Should not happen, but satisfy the type checker and be safe regardless.\n  if (!profile_id) {\n    return null;\n  }\n\n  const profile = CpuProfilerBindings.stopProfiling(profile_id, 0);\n  DEBUG_BUILD && debug.log(`[Profiling] stopped profiling of transaction: ${spanToJSON(span).description}`);\n\n  // In case of an overlapping span, stopProfiling may return null and silently ignore the overlapping profile.\n  if (!profile) {\n    DEBUG_BUILD &&\n      debug.log(\n        `[Profiling] profiler returned null profile for: ${spanToJSON(span).description}`,\n        'this may indicate an overlapping span or a call to stopProfiling with a profile title that was never started',\n      );\n    return null;\n  }\n\n  // Assign profile_id to the profile\n  profile.profile_id = profile_id;\n  return profile;\n}\n","/* eslint-disable max-lines */\nimport type { Event, IntegrationFn, Profile, ProfileChunk, ProfilingIntegration, Span } from '@sentry/core';\nimport {\n  consoleSandbox,\n  debug,\n  defineIntegration,\n  getCurrentScope,\n  getGlobalScope,\n  getIsolationScope,\n  getRootSpan,\n  LRUMap,\n  spanToJSON,\n  uuid4,\n} from '@sentry/core';\nimport type { NodeClient, NodeOptions } from '@sentry/node';\nimport { type RawThreadCpuProfile, CpuProfilerBindings, ProfileFormat } from '@sentry-internal/node-cpu-profiler';\nimport { DEBUG_BUILD } from './debug-build';\nimport { NODE_MAJOR, NODE_VERSION } from './nodeVersion';\nimport { MAX_PROFILE_DURATION_MS, maybeProfileSpan, stopSpanProfile } from './spanProfileUtils';\nimport {\n  addProfilesToEnvelope,\n  createProfilingChunkEvent,\n  createProfilingEvent,\n  findProfiledTransactionsFromEnvelope,\n  makeProfileChunkEnvelope,\n  PROFILER_THREAD_ID_STRING,\n  PROFILER_THREAD_NAME,\n} from './utils';\n\nconst CHUNK_INTERVAL_MS = 1000 * 60;\nconst PROFILE_MAP = new LRUMap<string, RawThreadCpuProfile>(50);\nconst PROFILE_TIMEOUTS: Record<string, NodeJS.Timeout> = {};\n\nfunction addToProfileQueue(profile_id: string, profile: RawThreadCpuProfile): void {\n  PROFILE_MAP.set(profile_id, profile);\n}\n\nfunction takeFromProfileQueue(profile_id: string): RawThreadCpuProfile | undefined {\n  const profile = PROFILE_MAP.get(profile_id);\n  PROFILE_MAP.remove(profile_id);\n  return profile;\n}\n\ninterface ChunkData {\n  id: string;\n  timer: NodeJS.Timeout | undefined;\n  startTraceID: string;\n}\n\nclass ContinuousProfiler {\n  private _profilerId: string | undefined;\n  private _client: NodeClient | undefined = undefined;\n  private _chunkData: ChunkData | undefined = undefined;\n  private _mode: 'legacy' | 'current' | undefined = undefined;\n  private _legacyProfilerMode: 'span' | 'continuous' | undefined = undefined;\n  private _profileLifecycle: 'manual' | 'trace' | undefined = undefined;\n  private _sampled: boolean | undefined = undefined;\n  private _sessionSamplingRate: number | undefined = undefined;\n  /**\n   * Called when the profiler is attached to the client (continuous mode is enabled). If of the profiler\n   * methods called before the profiler is initialized will result in a noop action with debug logs.\n   * @param client\n   */\n  public initialize(client: NodeClient): void {\n    this._client = client;\n    const options = client.getOptions();\n\n    this._mode = getProfilingMode(options);\n    this._sessionSamplingRate = Math.random();\n    this._sampled = this._sessionSamplingRate < (options.profileSessionSampleRate ?? 0);\n    this._profileLifecycle = options.profileLifecycle ?? 'manual';\n\n    switch (this._mode) {\n      case 'legacy': {\n        this._legacyProfilerMode =\n          'profilesSampleRate' in options || 'profilesSampler' in options ? 'span' : 'continuous';\n\n        DEBUG_BUILD && debug.log(`[Profiling] Profiling mode is ${this._legacyProfilerMode}.`);\n\n        switch (this._legacyProfilerMode) {\n          case 'span': {\n            this._setupAutomaticSpanProfiling();\n            break;\n          }\n          case 'continuous': {\n            // Continous mode requires manual calls to profiler.start() and profiler.stop()\n            break;\n          }\n          default: {\n            DEBUG_BUILD &&\n              debug.warn(\n                `[Profiling] Unknown profiler mode: ${this._legacyProfilerMode}, profiler was not initialized`,\n              );\n            break;\n          }\n        }\n        break;\n      }\n\n      case 'current': {\n        this._setupSpanChunkInstrumentation();\n\n        DEBUG_BUILD && debug.log(`[Profiling] Profiling mode is ${this._profileLifecycle}.`);\n\n        switch (this._profileLifecycle) {\n          case 'trace': {\n            this._startTraceLifecycleProfiling();\n            break;\n          }\n          case 'manual': {\n            // Manual mode requires manual calls to profiler.startProfiler() and profiler.stopProfiler()\n            break;\n          }\n          default: {\n            DEBUG_BUILD &&\n              debug.warn(`[Profiling] Unknown profiler mode: ${this._profileLifecycle}, profiler was not initialized`);\n            break;\n          }\n        }\n        break;\n      }\n      default: {\n        DEBUG_BUILD && debug.warn(`[Profiling] Unknown profiler mode: ${this._mode}, profiler was not initialized`);\n        break;\n      }\n    }\n\n    // Attaches a listener to beforeSend which will add the threadId data to the event being sent.\n    // This adds a constant overhead to all events being sent which could be improved to only attach\n    // and detach the listener during a profiler session\n    this._client.on('beforeSendEvent', this._onBeforeSendThreadContextAssignment.bind(this));\n  }\n\n  /**\n   * Initializes a new profilerId session and schedules chunk profiling.\n   * @returns void\n   */\n  public start(): void {\n    if (this._mode === 'current') {\n      this._startProfiler();\n      return;\n    }\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.log('[Profiling] Failed to start, sentry client was never attached to the profiler.');\n      return;\n    }\n\n    if (this._mode !== 'legacy') {\n      DEBUG_BUILD && debug.log('[Profiling] Continuous profiling is not supported in the current mode.');\n      return;\n    }\n\n    if (this._legacyProfilerMode === 'span') {\n      DEBUG_BUILD && debug.log('[Profiling] Calls to profiler.start() are not supported in span profiling mode.');\n      return;\n    }\n\n    // Flush any existing chunks before starting a new one.\n\n    this._stopChunkProfiling();\n\n    // Restart the profiler session\n    this._setupSpanChunkInstrumentation();\n    this._restartChunkProfiling();\n  }\n\n  /**\n   * Stops the current chunk and flushes the profile to Sentry.\n   * @returns void\n   */\n  public stop(): void {\n    if (this._mode === 'current') {\n      this._stopProfiler();\n      return;\n    }\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.log('[Profiling] Failed to stop, sentry client was never attached to the profiler.');\n      return;\n    }\n\n    if (this._mode !== 'legacy') {\n      DEBUG_BUILD && debug.log('[Profiling] Continuous profiling is not supported in the current mode.');\n      return;\n    }\n\n    if (this._legacyProfilerMode === 'span') {\n      DEBUG_BUILD && debug.log('[Profiling] Calls to profiler.stop() are not supported in span profiling mode.');\n      return;\n    }\n\n    this._stopChunkProfiling();\n    this._teardownSpanChunkInstrumentation();\n  }\n\n  private _startProfiler(): void {\n    if (this._mode !== 'current') {\n      DEBUG_BUILD && debug.log('[Profiling] Continuous profiling is not supported in the current mode.');\n      return;\n    }\n\n    if (this._chunkData !== undefined) {\n      DEBUG_BUILD && debug.log('[Profiling] Profile session already running, no-op.');\n      return;\n    }\n\n    if (this._mode === 'current') {\n      if (!this._sampled) {\n        DEBUG_BUILD && debug.log('[Profiling] Profile session not sampled, no-op.');\n        return;\n      }\n    }\n\n    if (this._profileLifecycle === 'trace') {\n      DEBUG_BUILD &&\n        debug.log(\n          '[Profiling] You are using the trace profile lifecycle, manual calls to profiler.startProfiler() and profiler.stopProfiler() will be ignored.',\n        );\n      return;\n    }\n\n    this._startChunkProfiling();\n  }\n\n  private _stopProfiler(): void {\n    if (this._mode !== 'current') {\n      DEBUG_BUILD && debug.log('[Profiling] Continuous profiling is not supported in the current mode.');\n      return;\n    }\n\n    if (this._profileLifecycle === 'trace') {\n      DEBUG_BUILD &&\n        debug.log(\n          '[Profiling] You are using the trace profile lifecycle, manual calls to profiler.startProfiler() and profiler.stopProfiler() will be ignored.',\n        );\n      return;\n    }\n\n    if (!this._chunkData) {\n      DEBUG_BUILD && debug.log('[Profiling] No profile session running, no-op.');\n      return;\n    }\n\n    this._stopChunkProfiling();\n  }\n\n  /**\n   * Starts trace lifecycle profiling. Profiling will remain active as long as there is an active span.\n   */\n  private _startTraceLifecycleProfiling(): void {\n    if (!this._client) {\n      DEBUG_BUILD &&\n        debug.log(\n          '[Profiling] Failed to start trace lifecycle profiling, sentry client was never attached to the profiler.',\n        );\n      return;\n    }\n\n    let activeSpanCounter = 0;\n    this._client.on('spanStart', _span => {\n      if (activeSpanCounter === 0) {\n        this._startChunkProfiling();\n      }\n      activeSpanCounter++;\n    });\n\n    this._client.on('spanEnd', _span => {\n      if (activeSpanCounter === 1) {\n        this._stopChunkProfiling();\n      }\n      activeSpanCounter--;\n    });\n  }\n\n  private _setupAutomaticSpanProfiling(): void {\n    if (!this._client) {\n      DEBUG_BUILD &&\n        debug.log(\n          '[Profiling] Failed to setup automatic span profiling, sentry client was never attached to the profiler.',\n        );\n      return;\n    }\n\n    const spanToProfileIdMap = new WeakMap<Span, string>();\n\n    this._client.on('spanStart', span => {\n      if (span !== getRootSpan(span)) {\n        return;\n      }\n\n      const profile_id = maybeProfileSpan(this._client, span);\n\n      if (profile_id) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const options = this._client!.getOptions();\n        // Not intended for external use, hence missing types, but we want to profile a couple of things at Sentry that\n        // currently exceed the default timeout set by the SDKs.\n        const maxProfileDurationMs = options._experiments?.maxProfileDurationMs || MAX_PROFILE_DURATION_MS;\n\n        if (PROFILE_TIMEOUTS[profile_id]) {\n          global.clearTimeout(PROFILE_TIMEOUTS[profile_id]);\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete PROFILE_TIMEOUTS[profile_id];\n        }\n\n        // Enqueue a timeout to prevent profiles from running over max duration.\n        const timeout = global.setTimeout(() => {\n          DEBUG_BUILD &&\n            debug.log(\n              '[Profiling] max profile duration elapsed, stopping profiling for:',\n              spanToJSON(span).description,\n            );\n\n          const profile = stopSpanProfile(span, profile_id);\n          if (profile) {\n            addToProfileQueue(profile_id, profile);\n          }\n        }, maxProfileDurationMs);\n\n        // Unref timeout so it doesn't keep the process alive.\n        timeout.unref();\n\n        getIsolationScope().setContext('profile', { profile_id });\n        spanToProfileIdMap.set(span, profile_id);\n      }\n    });\n\n    this._client.on('spanEnd', span => {\n      const profile_id = spanToProfileIdMap.get(span);\n\n      if (profile_id) {\n        if (PROFILE_TIMEOUTS[profile_id]) {\n          global.clearTimeout(PROFILE_TIMEOUTS[profile_id]);\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete PROFILE_TIMEOUTS[profile_id];\n        }\n        const profile = stopSpanProfile(span, profile_id);\n\n        if (profile) {\n          addToProfileQueue(profile_id, profile);\n        }\n      }\n    });\n\n    this._client.on('beforeEnvelope', (envelope): void => {\n      // if not profiles are in queue, there is nothing to add to the envelope.\n      if (!PROFILE_MAP.size) {\n        return;\n      }\n\n      const profiledTransactionEvents = findProfiledTransactionsFromEnvelope(envelope);\n      if (!profiledTransactionEvents.length) {\n        return;\n      }\n\n      const profilesToAddToEnvelope: Profile[] = [];\n\n      for (const profiledTransaction of profiledTransactionEvents) {\n        const profileContext = profiledTransaction.contexts?.profile;\n        const profile_id = profileContext?.profile_id;\n\n        if (!profile_id) {\n          throw new TypeError('[Profiling] cannot find profile for a transaction without a profile context');\n        }\n\n        // Remove the profile from the transaction context before sending, relay will take care of the rest.\n        if (profileContext) {\n          delete profiledTransaction.contexts?.profile;\n        }\n\n        const cpuProfile = takeFromProfileQueue(profile_id);\n        if (!cpuProfile) {\n          DEBUG_BUILD && debug.log(`[Profiling] Could not retrieve profile for transaction: ${profile_id}`);\n          continue;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const profile = createProfilingEvent(this._client!, cpuProfile, profiledTransaction);\n        if (!profile) return;\n\n        profilesToAddToEnvelope.push(profile);\n\n        // @ts-expect-error profile does not inherit from Event\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this._client!.emit('preprocessEvent', profile, {\n          event_id: profiledTransaction.event_id,\n        });\n\n        // @ts-expect-error profile does not inherit from Event\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this._client!.emit('postprocessEvent', profile, {\n          event_id: profiledTransaction.event_id,\n        });\n      }\n\n      addProfilesToEnvelope(envelope, profilesToAddToEnvelope);\n    });\n  }\n\n  /**\n   * Stop profiler and initializes profiling of the next chunk\n   */\n  private _restartChunkProfiling(): void {\n    if (!this._client) {\n      // The client is not attached to the profiler if the user has not enabled continuous profiling.\n      // In this case, calling start() and stop() is a noop action.The reason this exists is because\n      // it makes the types easier to work with and avoids users having to do null checks.\n      DEBUG_BUILD && debug.log('[Profiling] Profiler was never attached to the client.');\n      return;\n    }\n\n    if (this._chunkData) {\n      DEBUG_BUILD &&\n        debug.log(\n          `[Profiling] Chunk with chunk_id ${this._chunkData.id} is still running, current chunk will be stopped a new chunk will be started.`,\n        );\n      this._stopChunkProfiling();\n    }\n\n    this._startChunkProfiling();\n  }\n\n  /**\n   * Stops profiling of the current chunks and flushes the profile to Sentry\n   */\n  private _stopChunkProfiling(): void {\n    if (!this._chunkData) {\n      DEBUG_BUILD && debug.log('[Profiling] No chunk data found, no-op.');\n      return;\n    }\n\n    if (this._chunkData?.timer) {\n      global.clearTimeout(this._chunkData.timer);\n      this._chunkData.timer = undefined;\n      DEBUG_BUILD && debug.log(`[Profiling] Stopping profiling chunk: ${this._chunkData.id}`);\n    }\n\n    if (!this._client) {\n      DEBUG_BUILD &&\n        debug.log('[Profiling] Failed to collect profile, sentry client was never attached to the profiler.');\n      this._resetChunkData();\n      return;\n    }\n\n    if (!this._chunkData?.id) {\n      DEBUG_BUILD &&\n        debug.log(`[Profiling] Failed to collect profile for: ${this._chunkData?.id}, the chunk_id is missing.`);\n      this._resetChunkData();\n      return;\n    }\n\n    const profile = CpuProfilerBindings.stopProfiling(this._chunkData.id, ProfileFormat.CHUNK);\n\n    if (!profile) {\n      DEBUG_BUILD && debug.log(`[Profiling] Failed to collect profile for: ${this._chunkData.id}`);\n      this._resetChunkData();\n      return;\n    }\n\n    if (!this._profilerId) {\n      DEBUG_BUILD &&\n        debug.log('[Profiling] Profile chunk does not contain a valid profiler_id, this is a bug in the SDK');\n      this._resetChunkData();\n      return;\n    }\n    if (profile) {\n      DEBUG_BUILD && debug.log(`[Profiling] Sending profile chunk ${this._chunkData.id}.`);\n    }\n\n    DEBUG_BUILD && debug.log(`[Profiling] Profile chunk ${this._chunkData.id} sent to Sentry.`);\n    const chunk = createProfilingChunkEvent(\n      this._client,\n      this._client.getOptions(),\n      profile,\n      this._client.getSdkMetadata()?.sdk,\n      {\n        chunk_id: this._chunkData.id,\n        trace_id: this._chunkData.startTraceID,\n        profiler_id: this._profilerId,\n      },\n    );\n\n    if (!chunk) {\n      DEBUG_BUILD && debug.log(`[Profiling] Failed to create profile chunk for: ${this._chunkData.id}`);\n      this._resetChunkData();\n      return;\n    }\n\n    this._flush(chunk);\n    // Depending on the profile and stack sizes, stopping the profile and converting\n    // the format may negatively impact the performance of the application. To avoid\n    // blocking for too long, enqueue the next chunk start inside the next macrotask.\n    // clear current chunk\n    this._resetChunkData();\n  }\n\n  /**\n   * Flushes the profile chunk to Sentry.\n   * @param chunk\n   */\n  private _flush(chunk: ProfileChunk): void {\n    if (!this._client) {\n      DEBUG_BUILD &&\n        debug.log('[Profiling] Failed to collect profile, sentry client was never attached to the profiler.');\n      return;\n    }\n\n    const transport = this._client.getTransport();\n    if (!transport) {\n      DEBUG_BUILD && debug.log('[Profiling] No transport available to send profile chunk.');\n      return;\n    }\n\n    const dsn = this._client.getDsn();\n    const metadata = this._client.getSdkMetadata();\n    const tunnel = this._client.getOptions().tunnel;\n\n    const envelope = makeProfileChunkEnvelope('node', chunk, metadata?.sdk, tunnel, dsn);\n    transport.send(envelope).then(null, reason => {\n      DEBUG_BUILD && debug.error('Error while sending profile chunk envelope:', reason);\n    });\n  }\n\n  /**\n   * Starts the profiler and registers the flush timer for a given chunk.\n   * @param chunk\n   */\n  private _startChunkProfiling(): void {\n    if (this._chunkData) {\n      DEBUG_BUILD && debug.log('[Profiling] Chunk is already running, no-op.');\n      return;\n    }\n\n    const traceId =\n      getCurrentScope().getPropagationContext().traceId || getIsolationScope().getPropagationContext().traceId;\n    const chunk = this._initializeChunk(traceId);\n\n    CpuProfilerBindings.startProfiling(chunk.id);\n    DEBUG_BUILD && debug.log(`[Profiling] starting profiling chunk: ${chunk.id}`);\n\n    chunk.timer = global.setTimeout(() => {\n      DEBUG_BUILD && debug.log(`[Profiling] Stopping profiling chunk: ${chunk.id}`);\n      this._stopChunkProfiling();\n      DEBUG_BUILD && debug.log('[Profiling] Starting new profiling chunk.');\n      setImmediate(this._restartChunkProfiling.bind(this));\n    }, CHUNK_INTERVAL_MS);\n\n    // Unref timeout so it doesn't keep the process alive.\n    chunk.timer.unref();\n  }\n\n  /**\n   * Attaches profiling information to spans that were started\n   * during a profiling session.\n   */\n  private _setupSpanChunkInstrumentation(): void {\n    if (!this._client) {\n      DEBUG_BUILD &&\n        debug.log('[Profiling] Failed to initialize span profiling, sentry client was never attached to the profiler.');\n      return;\n    }\n\n    this._profilerId = uuid4();\n    getGlobalScope().setContext('profile', {\n      profiler_id: this._profilerId,\n    });\n  }\n\n  /**\n   * Assigns thread_id and thread name context to a profiled event if there is an active profiler session\n   */\n  private _onBeforeSendThreadContextAssignment(event: Event): void {\n    if (!this._client || !this._profilerId) return;\n    this._assignThreadIdContext(event);\n  }\n\n  /**\n   * Clear profiling information from global context when a profile is not running.\n   */\n  private _teardownSpanChunkInstrumentation(): void {\n    this._profilerId = undefined;\n    const globalScope = getGlobalScope();\n    globalScope.setContext('profile', {});\n  }\n\n  /**\n   * Initializes new profile chunk metadata\n   */\n  private _initializeChunk(traceId: string): ChunkData {\n    this._chunkData = {\n      id: uuid4(),\n      startTraceID: traceId,\n      timer: undefined,\n    };\n    return this._chunkData;\n  }\n\n  /**\n   * Assigns thread_id and thread name context to a profiled event.\n   */\n  private _assignThreadIdContext(event: Event): void {\n    if (!event?.contexts?.profile) {\n      return;\n    }\n\n    if (!event.contexts) {\n      return;\n    }\n\n    // @ts-expect-error the trace fallback value is wrong, though it should never happen\n    // and in case it does, we dont want to override whatever was passed initially.\n    event.contexts.trace = {\n      ...(event.contexts?.trace ?? {}),\n      data: {\n        ...(event.contexts?.trace?.data ?? {}),\n        ['thread.id']: PROFILER_THREAD_ID_STRING,\n        ['thread.name']: PROFILER_THREAD_NAME,\n      },\n    };\n  }\n\n  /**\n   * Resets the current chunk state.\n   */\n  private _resetChunkData(): void {\n    this._chunkData = undefined;\n  }\n}\n\n/** Exported only for tests. */\nexport const _nodeProfilingIntegration = ((): ProfilingIntegration<NodeClient> => {\n  if (![16, 18, 20, 22, 24].includes(NODE_MAJOR)) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Sentry Profiling] You are using a Node.js version that does not have prebuilt binaries (${NODE_VERSION}).`,\n        'The @sentry/profiling-node package only has prebuilt support for the following LTS versions of Node.js: 16, 18, 20, 22, 24.',\n        'To use the @sentry/profiling-node package with this version of Node.js, you will need to compile the native addon from source.',\n        'See: https://github.com/getsentry/sentry-javascript/tree/develop/packages/profiling-node#building-the-package-from-source',\n      );\n    });\n  }\n\n  return {\n    name: 'ProfilingIntegration',\n    _profiler: new ContinuousProfiler(),\n    setup(client: NodeClient) {\n      DEBUG_BUILD && debug.log('[Profiling] Profiling integration setup.');\n      this._profiler.initialize(client);\n      return;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Determines the profiling mode based on the options.\n * @param options\n * @returns 'legacy' if the options are using the legacy profiling API, 'current' if the options are using the current profiling API\n */\nfunction getProfilingMode(options: NodeOptions): 'legacy' | 'current' {\n  // Legacy mode takes precedence over current mode\n  if ('profilesSampleRate' in options || 'profilesSampler' in options) {\n    return 'legacy';\n  }\n\n  if ('profileSessionSampleRate' in options || 'profileLifecycle' in options) {\n    return 'current';\n  }\n\n  // If neither are set, we are in the legacy continuous profiling mode\n  return 'legacy';\n}\n\n/**\n * We need this integration in order to send data to Sentry. We hook into the event processor\n * and inspect each event to see if it is a transaction event and if that transaction event\n * contains a profile on it's metadata. If that is the case, we create a profiling event envelope\n * and delete the profile from the transaction metadata.\n */\nexport const nodeProfilingIntegration = defineIntegration(_nodeProfilingIntegration);\n"],"names":["parseSemver","threadId","isMainThread","debug","versions","env","forEachEnvelopeItem","uuid4","dsnToString","createEnvelope","getDebugImagesForResources","spanIsSampled","spanToJSON","CpuProfilerBindings","LRUMap","getRootSpan","getIsolationScope","ProfileFormat","getCurrentScope","getGlobalScope","consoleSandbox","defineIntegration"],"mappings":"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"}